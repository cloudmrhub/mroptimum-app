AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Tess SAM App

  This SAM template describes the entire Tess AWS Architecture

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 180
    Architectures:
    - x86_64
    Environment:
      Variables:
        JobBucketName: cloudmrhub-jobs1-test
        DataBucketName: cloudmrhub-data1-test
        ResultsBucketName: cloudmrhub-results-test
        CloudMRApiUrl: https://cloudmrhub.com/api
Parameters: 
    IdentityNameParameter: 
      Type: String
      Default: xyz

Resources:
  # This is the function which queues (or schedules) jobs on the pipeline.
  #
  # It is triggered by POST /pipeline request and will write the job to the
  # cloudmrhub-jobs bucket.
  # The request is authorized using the Authorization header which expects
  # a Bearer JWT token. This should get validated with the user db.
  QueueJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function creates an object defining the job configuration (<pipeline-id>.json) 
        in the jobs bucket. It is triggered by POST /pipeline.
      PackageType: Zip
      CodeUri: queue-job-node/
      Handler: app.handler
      Runtime: nodejs18.x
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:PutObject'
          - 's3:ListBucket'
          Resource: 'arn:aws:s3:::*'  
      Events:
        PostJobApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TessApi
            Path: /pipeline
            Method: post
            Auth:
              Authorizer: UserAuthorizer

  # This is the function which runs the Tess computation. It is the muscle worker.
  #
  # It should be triggered when an object is created in the cloudmrhub-jobs bucket.
  # This function will need to read the data objects referenced in the job description
  # from the cloudmrhub-data bucket.
  # Then the function will write the results to the cloudmrhub-results bucket.
  RunJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function runs the TESS computation (it is the muscle worker).
        It should be triggered when an object is created in the jobs bucket.
      PackageType: Zip
      CodeUri: run-job-python/
      Handler: app.handler
      Runtime: python3.10
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:*Object'
          - 's3:*Bucket'
          Resource:
          - 'arn:aws:s3:::*'
          - 'arn:aws:s3:::cloudmrhub-jobs1-test/*' # Allow access to jobs bucket
          - 'arn:aws:s3:::cloudmrhub-data1-test/*' # Allow access to data bucket
          - 'arn:aws:s3:::cloudmrhub-results-test/*' # Allow access to results bucket
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: JobsBucket
            Events: s3:ObjectCreated:*

  # This function is called by the front-end to parse the results zip file and 
  # convert it to a format which can be inspected on the client.
  #
  # It is triggered by GET /results/{id}.
  # The function will need sufficient permission to red from results bucket.
  ParseResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >
        This function parses the job results and converts them to a format which
        can be inspected on the client. It is triggered by a GET /results/{id}
      PackageType: Image
      Timeout: 300
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:*Object'
          - 's3:*Bucket'
          Resource:
          - 'arn:aws:s3:::*'
          - 'arn:aws:s3:::cloudmrhub-jobs1-test/*' # Allow access to jobs bucket
          - 'arn:aws:s3:::cloudmrhub-data1-test/*' # Allow access to data bucket
          - 'arn:aws:s3:::cloudmrhub-results-test/*' # Allow access to results bucket
      Events:
        GetParseResultsApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TessApi
            Method: get
            Path: /results
            Auth:
              Authorizer: UserAuthorizer
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: parse-results-python/
      DockerTag: python3.10-v1

  UserAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: user-authorizer-node/
      Handler: app.handler
      Runtime: nodejs18.x

  DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cloudmrhub-data1-test

  JobsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cloudmrhub-jobs1-test

  ResultsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cloudmrhub-results-test
      # Delete unzipped results objects after 7 days to save on storage costs.
      LifecycleConfiguration:
        Rules:
          - Id: DeleteUnzippedObjects
            Status: Enabled
            ExpirationInDays: 7
            Prefix: unzipped/

  TessApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      CacheClusterEnabled: false
      Auth:
        DefaultAuthorizer: UserAuthorizer
        Authorizers:
          UserAuthorizer:
            FunctionArn: !GetAtt UserAuthorizerFunction.Arn
            Identity:
              ReauthorizeEvery: 0

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  QueueJobApi:
    Description: API Gateway endpoint URL for Prod stage for Queue function
    Value: !Sub "https://${TessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/pipeline/"
  QueueJobFunction:
    Description: QueueJob Lambda Function ARN
    Value: !GetAtt QueueJobFunction.Arn
  QueueJobFunctionIamRole:
    Description: Implicit IAM Role created for QueueJob function
    Value: !GetAtt QueueJobFunctionRole.Arn
  RunJobFunction:
    Description: RunJob Lambda Function ARN
    Value: !GetAtt RunJobFunction.Arn
  RunJobFunctionIamRole:
    Description: Implicit IAM Role created for RunJob function
    Value: !GetAtt RunJobFunctionRole.Arn
  ParseResultsApi:
    Description: API Gateway endpoint URL for Prod stage for ParseResults function
    Value: !Sub "https://${TessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/results/"
  ParseResultsFunction:
    Description: ParseResults Lambda Function ARN
    Value: !GetAtt ParseResultsFunction.Arn
  ParseResultsFunctionIamRole:
    Description: Implicit IAM Role created for ParseResults function
    Value: !GetAtt ParseResultsFunctionRole.Arn
  UserAuthorizerFunction:
    Description: UserAuthorizer Lambda Function ARN
    Value: !GetAtt UserAuthorizerFunction.Arn
  UserAuthorizerFunctionIamRole:
    Description: Implicit IAM Role created for UserAuthorizer function
    Value: !GetAtt UserAuthorizerFunctionRole.Arn
  JobsBucketName:
    Value: !Ref JobsBucket
  DataBucketName:
    Value: !Ref DataBucket
  ResultsBucketName:
    Value: !Ref ResultsBucket
